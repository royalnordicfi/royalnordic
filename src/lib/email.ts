// Email notification service for Royal Nordic
export interface EmailNotification {
  to: string[]
  subject: string
  html: string
  text: string
}

export interface BookingNotificationData {
  bookingId: number
  customerName: string
  customerEmail: string
  customerPhone: string
  tourName: string
  tourDate: string
  adults: number
  children: number
  totalPrice: number
  specialRequests?: string
  paymentStatus: 'pending' | 'confirmed' | 'cancelled'
  createdAt: string
}

// Send booking notification to Royal Nordic staff
export async function sendBookingNotification(bookingData: BookingNotificationData) {
  const notification: EmailNotification = {
    to: ['royalnordicfi@gmail.com', 'contact@royalnordic.fi'],
    subject: `New Booking: ${bookingData.tourName} - ${bookingData.customerName}`,
    html: generateBookingEmailHTML(bookingData),
    text: generateBookingEmailText(bookingData)
  }

  try {
    // Send via Supabase Edge Function
    const response = await fetch(`${import.meta.env.VITE_SUPABASE_URL}/functions/v1/send-email`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${import.meta.env.VITE_SUPABASE_ANON_KEY}`,
      },
      body: JSON.stringify(notification),
    })

    if (!response.ok) {
      throw new Error('Failed to send email notification')
    }

    return await response.json()
  } catch (error) {
    console.error('Error sending email notification:', error)
    // Don't throw error - email failure shouldn't break the booking
    return null
  }
}

// Generate HTML email content
function generateBookingEmailHTML(booking: BookingNotificationData): string {
  return `
    <!DOCTYPE html>
    <html>
    <head>
      <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
        .header { background: #1f2937; color: white; padding: 20px; text-align: center; }
        .content { padding: 20px; }
        .booking-details { background: #f9fafb; padding: 20px; border-radius: 8px; margin: 20px 0; }
        .highlight { background: #dbeafe; padding: 15px; border-radius: 6px; margin: 10px 0; }
        .footer { background: #f3f4f6; padding: 20px; text-align: center; color: #6b7280; }
        .status-pending { color: #d97706; font-weight: bold; }
        .status-confirmed { color: #059669; font-weight: bold; }
        .status-cancelled { color: #dc2626; font-weight: bold; }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>üåü New Booking Alert</h1>
        <p>Royal Nordic Tours</p>
      </div>
      
      <div class="content">
        <h2>New booking received!</h2>
        
        <div class="booking-details">
          <h3>üìã Booking Details</h3>
          <p><strong>Booking ID:</strong> #${booking.bookingId}</p>
          <p><strong>Tour:</strong> ${booking.tourName}</p>
          <p><strong>Date:</strong> ${new Date(booking.tourDate).toLocaleDateString('fi-FI')}</p>
          <p><strong>Status:</strong> <span class="status-${booking.paymentStatus}">${booking.paymentStatus.toUpperCase()}</span></p>
        </div>
        
        <div class="highlight">
          <h3>üë• Customer Information</h3>
          <p><strong>Name:</strong> ${booking.customerName}</p>
          <p><strong>Email:</strong> ${booking.customerEmail}</p>
          <p><strong>Phone:</strong> ${booking.customerPhone || 'Not provided'}</p>
        </div>
        
        <div class="highlight">
          <h3>üí∞ Pricing</h3>
          <p><strong>Adults:</strong> ${booking.adults} √ó ‚Ç¨${getAdultPrice(booking.tourName)}</p>
          <p><strong>Children:</strong> ${booking.children} √ó ‚Ç¨${getChildPrice(booking.tourName)}</p>
          <p><strong>Total:</strong> ‚Ç¨${booking.totalPrice}</p>
        </div>
        
        ${booking.specialRequests ? `
        <div class="highlight">
          <h3>üìù Special Requests</h3>
          <p>${booking.specialRequests}</p>
        </div>
        ` : ''}
        
        <div class="highlight">
          <h3>‚è∞ Booking Time</h3>
          <p>${new Date(booking.createdAt).toLocaleString('fi-FI')}</p>
        </div>
      </div>
      
      <div class="footer">
        <p>This notification was automatically generated by the Royal Nordic booking system.</p>
        <p>Booking ID: #${booking.bookingId}</p>
      </div>
    </body>
    </html>
  `
}

// Generate plain text email content
function generateBookingEmailText(booking: BookingNotificationData): string {
  return `
New Booking Alert - Royal Nordic Tours

New booking received!

üìã Booking Details:
- Booking ID: #${booking.bookingId}
- Tour: ${booking.tourName}
- Date: ${new Date(booking.tourDate).toLocaleDateString('fi-FI')}
- Status: ${booking.paymentStatus.toUpperCase()}

üë• Customer Information:
- Name: ${booking.customerName}
- Email: ${booking.customerEmail}
- Phone: ${booking.customerPhone || 'Not provided'}

üí∞ Pricing:
- Adults: ${booking.adults} √ó ‚Ç¨${getAdultPrice(booking.tourName)}
- Children: ${booking.children} √ó ‚Ç¨${getChildPrice(booking.tourName)}
- Total: ‚Ç¨${booking.totalPrice}

${booking.specialRequests ? `
üìù Special Requests:
${booking.specialRequests}
` : ''}

‚è∞ Booking Time: ${new Date(booking.createdAt).toLocaleString('fi-FI')}

---
This notification was automatically generated by the Royal Nordic booking system.
Booking ID: #${booking.bookingId}
  `
}

// Helper functions to get tour prices
function getAdultPrice(tourName: string): number {
  const prices: Record<string, number> = {
    'Northern Lights Tour': 179,
    'Quality Snowshoe Rental': 59,
    'Customized Tour': 200
  }
  return prices[tourName] || 0
}

function getChildPrice(tourName: string): number {
  const prices: Record<string, number> = {
    'Northern Lights Tour': 149,
    'Quality Snowshoe Rental': 49,
    'Customized Tour': 150
  }
  return prices[tourName] || 0
}
